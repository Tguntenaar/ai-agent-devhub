import { Category, FunctionCallAction, ProposalBodyV2 } from "@/utils/types";
import { ProposalFundingCurrency } from "../../contract_types";

export async function handleAddProposal({body}: {body: any}): Promise<FunctionCallAction | {status: number, body: {error: string}}> {

  const { title, category, summary, description, linked_proposals, labels, amount, currency, receiver_account, requested_sponsor, supervisor, timeline, linked_rfp, accepted_terms } = body as {
    title: string;
    category: Category;
    summary:string;
    description:string;
    linked_proposals: number[];
    labels: string[];
    amount: number;
    currency: ProposalFundingCurrency;
    receiver_account: string;
    requested_sponsor: string;
    supervisor: string;
    accepted_terms?: number;
    timeline: "DRAFT" | "REVIEW"
    linked_rfp?: number;
  }

 let proposalBody: ProposalBodyV2 = {
    name: title || "",
    category: category || "Other",
    summary: summary || "",
    description: description || "",
    linked_proposals: linked_proposals || [], // Assuming ProposalId is a number (u32 in Rust)
    requested_sponsorship_usd_amount: amount || 0, // Assuming u32 translates to number
    requested_sponsorship_paid_in_currency: currency || "NEAR",
    receiver_account: receiver_account || "", // TODO: Make sure it is a valid account id. Step 1 is to make it for the account who has signed in.
    requested_sponsor: requested_sponsor || "",
    supervisor: supervisor || "",
    timeline: timeline == "REVIEW" ? {status: 'REVIEW', reviewStatus: {
      sponsorRequestedReview: false,
      reviewerCompletedAttestation: false,
      kycVerified: false,
  }} : {status: 'DRAFT'},
    // TODO: Make a small test with undefined and see if it works.
    linked_rfp: linked_rfp || undefined, // Optional RFPId
  }

  if (!proposalBody.name) {
    return {
      status: 400,
      body: { error: "Invalid input, title is required" },
    };
  }

  // Not required for now, can be added later
  // if (!proposalBody.category) {
  //   return {
  //     status: 400,
  //     body: { error: "Invalid input, category is required" },
  //   };
  // }

  // This could be generated by an LLM?
  // if (!proposalBody.summary) {
  //   return {
  //     status: 400,
  //     body: { error: "Invalid input, summary is required" },
  //   };
  // }

  if (!proposalBody.description) {
    return {
      status: 400,
      body: { error: "Invalid input, description is required" },
    };
  }

  if (!proposalBody.requested_sponsorship_usd_amount) {
    return {
      status: 400,
      body: { error: "Invalid input, requested amount in USD is required" },
    };
  }

  if (!proposalBody.requested_sponsorship_paid_in_currency) {
    return {
      status: 400,
      body: { error: "Invalid input, currency is required" },
    };
  }

  if (!accepted_terms) {
    return {
      status: 400,
      body: { error: "Invalid input, accepting devhub terms and conditions is required" },
    };
  }
  // GET CURRENT BLOCK HEIGHT
  let currentBlockHeight = 2000;

  const functionCall: FunctionCallAction = {
    type: "FunctionCall",
    params: {
      methodName: "add_proposal",
      args: { 
        body: proposalBody, 
        labels,
        accepted_terms_and_conditions_version: currentBlockHeight },
      gas: "30000000000000",
      deposit: "1",
    },
  };

  return functionCall;

  
}